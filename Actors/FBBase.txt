Class FB_HitFlash : Actor
{
 Default
  {
   +BRIGHT
   +NOINTERACTION
   +FORCEXYBILLBOARD
   RenderStyle "Stencil";
  }
 States
  {
  Spawn:
  "####" A 2 A_Warp(AAPTR_MASTER,frandom(-3,3),frandom(-3,3),frandom(-3,3),flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
   Stop;
  }
}

Class FB_FairyBase : Actor
{
  array<String> possSprite;
  array<StateLabel> possAtk;
  array<String> particles;
  //array<name> hitSounds;


  StateLabel attack;
  TextureID tex[6];

  int deathtimer;
  int spritetype;
  int attacktype;
  int attackloop;

  Default
  {
    Health 20;
    Radius 16;
    Height 30;
    Mass 50;
    MeleeRange 100;
	MeleeThreshold 180;
    Speed 3;
    Scale 1;
	Painchance 128;
    Tag "Fairy";
    Monster;
    StencilColor "White";
    +DONTHARMCLASS
    +NOGRAVITY
    +FLOAT
    +FLOATBOB
    +DONTFALL
    +NOICEDEATH
	+AVOIDMELEE
	+NOINFIGHTING
	+NOBLOODDECALS
	FloatBobStrength 0.5;
	BloodType "FB_MagicBlood";
	//MinMissileChance 240;
	//TeleFogSourceType "PM_SmallDemonicTeleportFog";
	//TeleFogDestType "PM_SmallDemonicTeleportFog";
  }

  virtual void start() {
	// Override this method and input possible logic such as sprite choosing
	// But make sure super is called last to ensure states and sprites and can be assigned.
	/*if(hitSounds.size() < 1) {
		// If there are no hit sounds push defaults
		hitSounds.push("FB/RaizingHit");
		hitSounds.push("FB/StardustArenaHit");
	}*/
   	if(possSprite.size() < 1) {
		//If there is no sprite pushed, then default to some other ones
		console.printf("Aint got no gas!\n");
		possSprite.push("FA_1");
		possSprite.push("FA_2");
	}
	console.printf("Sprites: %d\n", possSprite.size());
	sprite = GetSpriteIndex(possSprite[random(0, possSprite.size()-1)]);
	if(particles.size() < 1) {
		// If there are no particle textures then default to standard particles
		tex[0] = TexMan.CheckForTexture("DTPRA0",TexMan.Type_Sprite);
		tex[1] = TexMan.CheckForTexture("DTPRB0",TexMan.Type_Sprite);
		tex[2] = TexMan.CheckForTexture("SPKOE0",TexMan.Type_Sprite);
		tex[3] = TexMan.CheckForTexture("SPKPE0",TexMan.Type_Sprite);
		tex[4] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
		tex[5] = TexMan.CheckForTexture("SPKGE0",TexMan.Type_Sprite);
	}
  }

  protected void HitSound()
  {
   switch(fb_hitsfx)
   {
    case 0: A_StartSound("FB/RaizingHit",CHAN_AUTO,0,0.9); break;
	case 1: A_StartSound("FB/StardustArenaHit",CHAN_AUTO,0,0.9); break;
   }
  }

  override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
    int dmg = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	CVar hitflashenabled = CVar.FindCVar('fb_hitflash');
	
    if(hitflashenabled.GetInt() && dmg > 0)
	{
		HitSound();
		A_SpawnItemEx("FB_HitFlash",flags:SXF_SETMASTER|SXF_TRANSFERSCALE|SXF_TRANSFERSTENCILCOL|SXF_TRANSFERSPRITEFRAME);
	}
	
	return dmg;
	}

  override void PostBeginPlay()
  {
	start();
	super.PostBeginPlay();
  }
  states {
	LoadSprites:
    FA_1 AB 0; 
	FA_2 AB 0; 
	FA_3 AB 0; 
	FB_1 AB 0;
	FB_2 AB 0;
  }
}

Class FB_GiftOrb : Actor
{
  int timer;
  int itemtype;
  Default
  {
  +CLIENTSIDEONLY
  +FORCEXYBILLBOARD
  +HEXENBOUNCE
  +NOBLOCKMAP
  +NOGRAVITY
  Renderstyle "Add";
  Scale 0.25;
  +Bright
  }
  
  override void PostBeginPlay()
  {
   Super.PostBeginPlay();
   tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
   tex[1] = TexMan.CheckForTexture("SPKWE0",TexMan.Type_Sprite);
   itemtype = random(0,3);
   timer = random(45,95);
   A_SetRoll(random(0,256));
  }
  
  TextureID tex[2];
  
  void FB_GiftOrbDrop()
  {
   switch(itemtype)
    {
    case 0: A_SpawnItemEx("Clip",flags:SXF_NOCHECKPOSITION); break;
	case 1: A_SpawnItemEx("Shell",flags:SXF_NOCHECKPOSITION); break;
	case 2: A_SpawnItemEx("HealthBonus",flags:SXF_NOCHECKPOSITION); break;
	case 3: A_SpawnItemEx("ArmorBonus",flags:SXF_NOCHECKPOSITION); break;
	}
  }
  
  void FB_GiftOrbParticles()
  {
	A_SpawnParticleEx
	(
	"",
	tex[0],
	style: STYLE_Add,
	flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,
	lifetime: random(12,25),
	size: frandom(8,15),
	velx: frandom(-0.5,0.5),
	vely: frandom(-0.5,0.5),
	velz: frandom(-0.5,0.5),
	startalphaf: frandom(0.6,0.95),
	fadestepf: -1,
	sizestep: -0.2,
	startroll: random(-180,180),
	rollvel: frandom(-1,1)
	);
	A_SpawnParticleEx
	(
	"",
	tex[1],
	style: STYLE_Add,
	flags: SPF_RELATIVE|SPF_ROLL|SPF_FULLBRIGHT,
	lifetime: random(1,9),
	size: frandom(12,30),
	xoff: -2,
	velx: frandom(-1,1),
	vely: frandom(-1,1),
	velz: frandom(-1,1),
	startalphaf: frandom(0.15,0.35),
	fadestepf: -1,
	sizestep: -0.2,
	startroll: random(-180,180)
	);
  }
  
  States
  {
   Spawn:
   SPKW B 2 Light("FB-FlickerWhiteLight")
   {
    if(timer < 0)
	SetStateLabel("ItemDrop");
    FB_GiftOrbParticles();
    A_ChangeVelocity(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.2),CVF_RELATIVE);
	timer--;
   }
   Loop;
   ItemDrop:
   TNT1 A 0
   {
    FB_GiftOrbDrop();
	A_SpawnParticleEx
	(
	"",
	TexMan.CheckForTexture("SPKWC0"),
	style: STYLE_Add,
	flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
	lifetime: 10,
	size: 150,
	angle: 0,
	xoff: 0,
	yoff: 0,
	zoff: 0,
	startalphaf: 1,
	fadestepf: -1,
	sizestep: -2,
	startroll: random(-180,180)
	);
	for(int i=random(5,8);i>0;i--)
	A_SpawnParticleEx
	(
	"",
	TexMan.CheckForTexture("Graphics/Particles/fbparticlesquare.png"),
	style: STYLE_Add,
	flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	lifetime: random(20,60),
	size: frandom(3,12),
	velx: frandom(-4,4),
	vely: frandom(-4,4),
	velz: frandom(-5,5),
	accelz: frandom(0.1,0.8),
	startalphaf: 1.0,
	fadestepf: -0.5,
	sizestep: -0.2,
	startroll: random(-180,180)
	);
   }
   TNT1 A 3 Light("FB-WhiteLightExplode");
   Stop;
   }
}